# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/qed/all/qed.rbi
#
# qed-2.9.2

module QED
  def self.configure(name = nil, &block); end
  def self.const_missing(name); end
  def self.metadata; end
  def self.profile(name = nil, &block); end
  def self.profiles; end
  def self.run!(name = nil, &block); end
end
module QED::Utils
  def find_root(path = nil); end
  def load_config; end
  def load_etc; end
  def load_rc; end
  def lookup(glob, path = nil); end
  def root; end
  def system_tmpdir; end
  extend QED::Utils
end
class QED::Settings
  def clear_directory; end
  def default_profile; end
  def files; end
  def files=(files); end
  def format; end
  def format=(arg0); end
  def initialize(options = nil, &block); end
  def initialize_defaults; end
  def load_profile(&block); end
  def loadpath; end
  def loadpath=(arg0); end
  def mode; end
  def mode=(arg0); end
  def omit; end
  def omit=(arg0); end
  def profiles; end
  def requires; end
  def requires=(arg0); end
  def root; end
  def root_directory; end
  def rooted; end
  def rooted=(arg0); end
  def rootless; end
  def rootless=(arg0); end
  def rootless?; end
  def temporary_directory; end
  def tmpdir; end
  def trace; end
  def trace=(arg0); end
end
class Object < BasicObject
  def must_return(value); end
end
class String
  def indent(n, c = nil); end
  def tabto(num = nil, opts = nil); end
end
class QED::Step
  def arguments; end
  def assertive?; end
  def back_step; end
  def clean_example; end
  def code; end
  def code?; end
  def data; end
  def data?; end
  def demo; end
  def description; end
  def example; end
  def example?; end
  def example_lineno; end
  def example_lines; end
  def explain; end
  def explain_lineno; end
  def explain_lines; end
  def file; end
  def has_example?; end
  def heading?; end
  def initialize(demo, explain_lines, example_lines, last); end
  def inspect; end
  def lineno; end
  def next_step; end
  def next_step=(n); end
  def sample_text; end
  def text; end
  def to_s; end
  def tweak_code; end
  def type; end
end
class QED::Parser
  def demo; end
  def file; end
  def initialize(demo, options = nil); end
  def lines; end
  def mode; end
  def parse; end
  def parse_comment_lines; end
  def parse_lines; end
  def steps; end
end
class QED::Scope < Module
  def After(type = nil, &procedure); end
  def Before(type = nil, &procedure); end
  def Data(file); end
  def Table(file = nil, options = nil); end
  def When(*patterns, &procedure); end
  def __DIR__(file = nil); end
  def __create_clean_binding_method__; end
  def clear_working_directory!; end
  def const_missing(const); end
  def demo_directory; end
  def evaluate(code, file = nil, line = nil); end
  def include(*modules); end
  def initialize(demo, options = nil); end
  def utilize(file); end
end
class QED::Evaluator
  def advise!(signal, *args); end
  def applique_observers; end
  def demo; end
  def evaluate(step); end
  def evaluate_applique(step); end
  def evaluate_example(step); end
  def evaluate_links(step); end
  def evaluate_matchers(step); end
  def evaluate_test(step); end
  def initialize(demo, options = nil); end
  def match_string_to_regexp(str); end
  def observers; end
  def run; end
  def run_steps; end
  def self.run(demo, options = nil); end
end
class QED::Applique < Module
  def After(type = nil, &procedure); end
  def Before(type = nil, &procedure); end
  def When(*patterns, &procedure); end
  def __matchers__; end
  def __signals__; end
  def const_missing(name); end
  def initialize(file = nil); end
  def initialize_copy(other); end
  def self.cache; end
  def self.for(file); end
end
class QED::Demo
  def applique; end
  def applique_locations; end
  def applique_prime; end
  def directory; end
  def file; end
  def initialize(file, options = nil); end
  def mode; end
  def name; end
  def parse; end
  def parser; end
  def run(options = nil); end
  def steps; end
end
class QED::Session
  def clear_directory; end
  def demo_files; end
  def demo_files_in_comment_mode; end
  def demo_files_in_normal_mode; end
  def demos; end
  def demos_gather(extensions = nil); end
  def directory; end
  def files; end
  def format; end
  def initialize(settings = nil); end
  def loadpath; end
  def mode; end
  def observers; end
  def omit; end
  def prepare_loadpath; end
  def profile; end
  def reporter; end
  def require_libraries; end
  def require_reporters; end
  def requires; end
  def reset_assertion_counts; end
  def rooted; end
  def run; end
  def settings; end
  def total_step_count; end
  def trace?; end
end
class QED::Document
  def css; end
  def css=(arg0); end
  def demo_files; end
  def dryrun; end
  def dryrun=(arg0); end
  def file_type(text); end
  def format; end
  def format=(arg0); end
  def generate; end
  def html?; end
  def initialize(options = nil); end
  def make_output_directory; end
  def output; end
  def output=(arg0); end
  def paths; end
  def paths=(paths); end
  def quiet; end
  def quiet=(arg0); end
  def quiet?; end
  def require_qedoc; end
  def require_rdiscount; end
  def require_rdoc; end
  def save(text); end
  def template; end
  def title; end
  def title=(arg0); end
end
class QED::Template
  def css; end
  def initialize(template, spec, title, css); end
  def parse_template; end
  def spec; end
  def title; end
end
